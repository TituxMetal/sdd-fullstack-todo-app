# .github/workflows/ci.yml

name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches:
      - main
      - 'feature/**'
      - 'fix/**'
      - 'hotfix/**'
  workflow_dispatch:

jobs:
  validate:
    name: Validate Project
    runs-on: ubuntu-latest

    container:
      # Use an official Node.js image based on Debian 12, ensuring
      # our CI environment matches production.
      image: node:22-bookworm-slim

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # This MUST run before `setup-node` so that the correct Yarn version is used for caching.
      - name: Enable Corepack
        run: corepack enable && corepack prepare yarn@4.9.1 --activate

      - name: Minimal Yarn config
        run: |
          echo "nodeLinker: node-modules" >> .yarnrc.yml

      - name: Set up Node.js and cache dependencies
        uses: actions/setup-node@v4
        with:
          cache: 'yarn'

      # The node:bookworm-slim container is minimal and needs extra dependencies for our tools.
      - name: Install System Dependencies
        run: apt-get update && apt-get install -y jq openssl

      - name: Cache Turborepo artifacts
        uses: actions/cache@v4
        with:
          path: .turbo
          key: debian-turbo-${{ github.sha }}
          restore-keys: |
            debian-turbo-

      - name: Install Dependencies
        # Installs dependencies for all workspaces in the monorepo.
        run: yarn install --immutable

      - name: Generate Prisma Client
        # Generate Prisma client for TypeScript type checking
        run: yarn workspace @app/api prisma generate

      - name: Run Validation Checks
        run: |
          yarn format:check
          yarn lint:check
          yarn typecheck
          yarn test
          yarn build

  docker:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    strategy:
      matrix:
        include:
          - service: api
            dockerfile: docker/Dockerfile.api
          - service: web
            dockerfile: docker/Dockerfile.web

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images:
            ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{
            matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=prod,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            PUBLIC_API_URL=${{ matrix.service == 'web' && '/api' || '' }}
            API_URL=${{ matrix.service == 'web' && format('http://{0}-api:3000', github.event.repository.name) || '' }}
